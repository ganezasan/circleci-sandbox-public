
version: 2
jobs:
  job-1:
    docker:
      - image: circleci/golang:1.11.0
    steps:
      - checkout
      - run: sleep 120
  job-2:
    docker:
      - image: circleci/golang:1.11.0
    steps:
      - checkout
      - run: sleep 160
  auto-cancel:
    docker:
      - image: circleci/golang:1.11.0
    steps:
      - checkout
      - run:
          name: auto-cancel
          command: |
            PIPLINE_NUMBER=$(curl -s -H 'Accept: application/json' -X GET https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}?circle-token=${CIRCLECI_TOKEN} | jq .pipeline_id)
            echo $PIPLINE_NUMBER
            while true; do
              LATEST_PIPLINE_NUMBER=$(curl -X GET https://circleci.com/api/v2/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pipeline?circle-token=$CIRCLECI_TOKEN\&branch=${CIRCLE_BRANCH} | jq .items[0].number)
              echo $LATEST_PIPLINE_NUMBER
              is_pending=$(curl -s -H 'Accept: application/json' -X GET https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/job?circle-token=${CIRCLECI_TOKEN} | jq '.items | map(select(.name != "auto-cancel")) | any(.status == "running")')

              if [ "$LATEST_PIPLINE_NUMBER" != "$PIPLINE_NUMBER" ]; then
                echo "Cancel workflow"
                # If you want to stop firebase test lab script, you should add some scripts to stop them.
                curl -s -H 'Accept: application/json' -X POST https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel?circle-token=${CIRCLECI_TOKEN}
                exit 0
              elif [ "$is_pending" == "false" ]; then
                echo "other jobs finished"
                exit 0
              else
                echo "waiting other jobs"
              fi
              sleep 10
            done

workflows:
  version: 2
  auto-cancel-example:
    jobs:
      - job-1
      - job-2
      - auto-cancel
